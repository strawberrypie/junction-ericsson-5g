- set_fact: function_name="test"

- block:
    - name: Stop all docker containers
      shell: docker stop $(docker ps -a -q) | echo "All docker containers were stopped"
      ignore_errors: true

    - name: Wait until all dockers are stopped
      shell: docker ps -a -q --format {%raw%}"{{.Status}}"{%endraw%}
      register: result
      until: result.stdout.count("Up") == 0
      retries: "{{ default_retries }}"
      delay: "{{ default_delay }}"

    - name: Remove all docker containers
      shell: docker rm $(docker ps -a -q) | echo "All docker containers were removed"
      ignore_errors: true

    - name: Wait until all dockers are removed
      shell: docker ps -a -q
      register: result
      until: result.stdout == ""
      retries: "{{ default_retries }}"
      delay: "{{ default_delay }}"

    - name: Create docker-compose-{{ function_name }}.yml file
      template:
        src: "{{ role_path }}/files/docker-compose.yml"
        dest: "{{ role_path }}/files/docker-compose-{{ function_name }}.yml"

    - name: Deploy {{ function_name }} function
      docker_service:
        project_src: "{{ role_path }}/files"
        files: "docker-compose-{{ function_name }}.yml"
      register: output

    - debug:
        var: output

    - name: Check all port numbers are accessible from current host
      wait_for:
        host: 127.0.0.1
        port: "{{ item }}"
        state: started         # Port should be open
        delay: "{{ default_delay }}"
        timeout: 10
      ignore_errors: yes
      with_items:
        - 8080

    - name: Run REST API tests
      register: api_tests_output
      docker_container:
        command: /bin/bash -c "rm /root/{{ custom_maps | replace('/','_') }}.txt; while nc -z localhost 8080; do sleep 0.1; curl http://127.0.0.1:8080/api/v1/scores >> /root/{{ custom_maps | replace('/','_') }}.txt; done"
        name: "api-tests-{{ function_name }}"
        image: "{{ image_name }}"
        network_mode: "host"
        volumes:
          - "{{ role_path }}/results:/root"

    - name: Check REST API tests status
      shell: docker ps -a -f name="api-tests-{{ function_name }}" --format {%raw%}"{{.Status}}"{%endraw%} | head -n 1
      register: result
      until: result.stdout.count("Exited") == 1 or result.stdout.count("Up 6 minutes") == 1
      retries: 13
      delay: "{{ default_delay }}"

    #- name: Fail the play if exit code != 0
    #  fail:
    #    msg: "Docker exit code != 0"
    #  when: result.stdout.count("Exited (0)") != 1

    - name: Get server logs
      shell: docker logs files_server_1 > /root/server_{{ custom_maps | replace('/','_') }}.log
      ignore_errors: true

    - name: Get client logs
      shell: docker logs files_client_1 > /root/client_{{ custom_maps | replace('/','_') }}.log
      ignore_errors: true

    - name: Get curl logs
      shell: docker logs api-tests-test > /root/curl_{{ custom_maps | replace('/','_') }}.log
      ignore_errors: true

    - name: Remove REST API docker container
      docker_container:
        name: "api-tests-{{ function_name }}"
        state: absent

    - debug:
        msg: "{{ api_tests_output }}"

    - name: Delete {{ function_name }} function
      docker_service:
        project_src: "{{ role_path }}/files"
        files: "docker-compose-{{ function_name }}.yml"
        state: absent
      register: output

    - debug:
        var: output
